<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Xavier Nayrac</title>
 <link href="http://xavier.nayrac.eu/atom.xml" rel="self"/>
 <link href="http://xavier.nayrac.eu/"/>
 <updated>2015-10-06T17:25:29+02:00</updated>
 <id>http://xavier.nayrac.eu</id>
 <author>
   <name>Xavier Nayrac</name>
   <email></email>
 </author>

 
 <entry>
   <title>How many times a day do I sit down at my desk</title>
   <link href="http://xavier.nayrac.eu/2015/10/06/how-many-times-a-day-do-i-sit-down-at-my-desk/"/>
   <updated>2015-10-06T00:00:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/10/06/how-many-times-a-day-do-i-sit-down-at-my-desk</id>
   <content type="html">&lt;p&gt;Since September 21, I record every day when I&amp;#39;m (and when I&amp;#39;m not) seated at
my desk. I&amp;#39;m going to conduct this, somewhat weird, experiment during seven or
eight weeks. I would like to known how many times a day do I sit down at my
desk, and also to see if there is some recurring patterns.
I record those data with an arduino linked to a
&lt;a href=&quot;http://www.interlinkelectronics.com/FSR406.php&quot;&gt;Force Sensing Resistor&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/lkdjiin/sit-down&quot;&gt;code for the arduino&lt;/a&gt;
(along with some photos) is available on Github.&lt;/p&gt;

&lt;p&gt;This blog post is a debriefing of the first week of data recording.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/raw.jpg&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The pressure is recorded with a scale varying from 0 to 1023.
Zero being the absence of pressure and 1023 being the maximum pressure that the
device can measure up. I take a measure every 30 seconds.&lt;/p&gt;

&lt;p&gt;On the preceding plot, we can see the raw data for the week. They represent the
whole scale of values. Depending how I&amp;#39;m sitting the device record different
values. The blue points at bottom clearly indicate when I am seated.
After a few trials and errors, I found that 20 is a good threshold to separate
raw data in two categories: &lt;em&gt;seated&lt;/em&gt; and &lt;em&gt;not seated&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here is the result for the first week:&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;Day&lt;/th&gt;
  &lt;th&gt;Times seated&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-21&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-22&lt;/td&gt;&lt;td&gt;30&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-23&lt;/td&gt;&lt;td&gt;33&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-24&lt;/td&gt;&lt;td&gt;33&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-25&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-26&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-27&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;One can visualize the processed data in an interesting way, for example the
Monday ; maroon areas represent when I am seated at my desk (the duration):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/visualize-day.png&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One can leverage this type of visualization to look at the whole week.
It could be a mean to identify patterns. But this week was special for me
(&lt;em&gt;I worked also during the weekend, I normally never do this&lt;/em&gt;) so I&amp;#39;m going to
wait for more data before to conclude anything.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/visualize-week.png&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I will surely write a following, more technical, post to show the R code to
process the data and for the plots.&lt;/p&gt;

&lt;p&gt;If you have a similar project (in your head or in the real world) I would
like to hear about it, so leave your comment.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to implement a well known algorithm</title>
   <link href="http://xavier.nayrac.eu/2015/09/11/how-to-implement-a-well-known-algorithm/"/>
   <updated>2015-09-11T14:49:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/09/11/how-to-implement-a-well-known-algorithm</id>
   <content type="html">&lt;p&gt;When you are implementing a «well known» algorithm you really should strictly
follow the algorithm&amp;#39;s steps as they are.&lt;/p&gt;

&lt;p&gt;Do not start to modify this or that part.&lt;/p&gt;

&lt;p&gt;Or even worse, do not try to optimize anything.&lt;/p&gt;

&lt;p&gt;If it is called a «well known» algorithm, there must a good reason for that.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s surely that lots and lots of people have run into trouble on this algorithm.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s likely that an army of developers have worked on it.&lt;/p&gt;

&lt;p&gt;Sometimes since 40 years.&lt;/p&gt;

&lt;p&gt;A «well known» algorithm is good enough for you.&lt;/p&gt;

&lt;p&gt;Implement it as it is.&lt;/p&gt;

&lt;p&gt;Save your time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Find the Size of an Arduino Program</title>
   <link href="http://xavier.nayrac.eu/2015/08/20/find-the-size-of-an-arduino-program/"/>
   <updated>2015-08-20T00:00:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/08/20/find-the-size-of-an-arduino-program</id>
   <content type="html">&lt;p&gt;If I want to find the size and the memory need of an Arduino program, how do I
do that? And why would I know their size?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/640-arduino-avr.jpg&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Where is the program hidden?&lt;/h2&gt;

&lt;p&gt;The program, in elf format, is located in a hidden folder. You may find that its
size is quite impressive. This is not its final size into the Arduino.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;s -lh .build/uno/firmware.elf 
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; xavier xavier 40K août  &lt;span class=&quot;m&quot;&gt;19&lt;/span&gt; 21:01 .build/uno/firmware.elf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;A hidden folder is a folder whose name starts with a dot. One say «hidden»
because on Linux and OS X they are invisible by default.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;How to find the memory needs of an Arduino program&lt;/h2&gt;

&lt;p&gt;We are going to use the program &lt;code&gt;avr-size&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;avr-size -dC .build/uno/firmware.elf 
AVR Memory Usage
----------------
Device: Unknown

Program:    &lt;span class=&quot;m&quot;&gt;2786&lt;/span&gt; bytes
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.text + .data + .bootloader&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Data:         &lt;span class=&quot;m&quot;&gt;34&lt;/span&gt; bytes
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.data + .bss + .noinit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I&amp;#39;m using 34 bytes of RAM, for a total of 2786 bytes into the
microcontroller.&lt;/p&gt;

&lt;p&gt;The switch &lt;code&gt;-d&lt;/code&gt; gives us the values in decimal. The switch &lt;code&gt;-C&lt;/code&gt; specify the
report&amp;#39;s format from &lt;code&gt;avr-size&lt;/code&gt;. See &lt;code&gt;avr-size --help&lt;/code&gt; for other formats.&lt;/p&gt;

&lt;h2&gt;Why&lt;/h2&gt;

&lt;p&gt;ATMEL microcontrollers have different size of memory (for the program and for
the RAM). For example the ATtiny13 has 1 Kb for the program and 64 bytes of
RAM, while the ATtiny85 has 8 Kb for the program and 512 bytes for the RAM.&lt;/p&gt;

&lt;p&gt;For those programs who are intended to leave the Arduino platform, to end in a
microcontroller, knowing the memory size helps to know if it&amp;#39;s interesting
to spend time and energy to optimise these programs.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Do You Know The Gem Gem?</title>
   <link href="http://xavier.nayrac.eu/2015/08/03/do-you-know-the-gem-gem/"/>
   <updated>2015-08-03T00:00:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/08/03/do-you-know-the-gem-gem</id>
   <content type="html">&lt;p&gt;&lt;code&gt;gem&lt;/code&gt; is a well known command amongst rubyists, for a good reason:
it is central to the use of Ruby.
As an example, if I want to benefit from 
&lt;a href=&quot;https://github.com/michaeldv/awesome_print&quot;&gt;awesome print&lt;/a&gt; in my irb session,
I will install it like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem install awesome_print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Likewise, did you ever see a Rails app without a Gemfile?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.0.0&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;4.0.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pg&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Actually if you have only 3 days of Ruby in your life, you can use &lt;code&gt;gem&lt;/code&gt; like
a boss. Do you? I don&amp;#39;t. Not yet.&lt;/p&gt;

&lt;p&gt;Indeed I use Ruby every single day since 5 or 6 years. And I had never written
&lt;code&gt;gem --help&lt;/code&gt;. Never. Not once.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem --help
RubyGems is a sophisticated package manager for Ruby.  This is a
...
  Further help:
    gem help commands            list all &amp;#39;gem&amp;#39; commands
    gem help examples            show some examples of usage
    gem help gem_dependencies    gem dependencies file guide
    gem help platforms           gem platforms guide
    gem help &amp;lt;COMMAND&amp;gt;           show help on COMMAND
    gem server                   present a web page at
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think there is a lot to read. So, here is a quick tour of the many possibilities of &lt;code&gt;gem&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;gem help commands&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start by looking at the different commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem help commands
GEM commands are:

    build                  Build a gem from a gemspec
    cert                   Manage RubyGems certificates and signing settings
...
    wrappers               Re run generation of environment wrappers for gems.
    yank                   Remove a pushed gem from the index
...
Commands may be abbreviated, so long as they are unambiguous.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have abbreviated the previous output, because there are &lt;strong&gt;33 commands&lt;/strong&gt;.
I really had no clue of such a big number of commands. Here is the list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;build&lt;/li&gt;
&lt;li&gt;cert&lt;/li&gt;
&lt;li&gt;check&lt;/li&gt;
&lt;li&gt;cleanup&lt;/li&gt;
&lt;li&gt;contents&lt;/li&gt;
&lt;li&gt;dependency&lt;/li&gt;
&lt;li&gt;environment&lt;/li&gt;
&lt;li&gt;fetch&lt;/li&gt;
&lt;li&gt;generate_index&lt;/li&gt;
&lt;li&gt;help&lt;/li&gt;
&lt;li&gt;install&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;lock&lt;/li&gt;
&lt;li&gt;mirror&lt;/li&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;outdated&lt;/li&gt;
&lt;li&gt;owner&lt;/li&gt;
&lt;li&gt;pristine&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;query&lt;/li&gt;
&lt;li&gt;rdoc&lt;/li&gt;
&lt;li&gt;regenerate_binstubs&lt;/li&gt;
&lt;li&gt;search&lt;/li&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;li&gt;sources&lt;/li&gt;
&lt;li&gt;specification&lt;/li&gt;
&lt;li&gt;stale&lt;/li&gt;
&lt;li&gt;uninstall&lt;/li&gt;
&lt;li&gt;unpack&lt;/li&gt;
&lt;li&gt;update&lt;/li&gt;
&lt;li&gt;which&lt;/li&gt;
&lt;li&gt;wrappers&lt;/li&gt;
&lt;li&gt;yank&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personnaly I already used &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;cleanup&lt;/code&gt;, &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;,
&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;uninstall&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and that&amp;#39;s it! 7 commands on 33.
I am off the mark.&lt;/p&gt;

&lt;p&gt;Looking closer to the output of &lt;code&gt;gem help commands&lt;/code&gt;, I realize that one can
abbreviate each command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem install my_gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;thus will be identical to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem i my_gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I really like this idea.&lt;/p&gt;

&lt;h2&gt;gem help a_command&lt;/h2&gt;

&lt;p&gt;One can get some help for a specific command.
For example, with &lt;code&gt;gem help install&lt;/code&gt; I learn that those options to not generate
the documentation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--no-rdoc
--no-ri
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;are deprecated! Now one can use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-N, --no-document
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;gem help examples&lt;/h2&gt;

&lt;p&gt;Obviously &lt;code&gt;gem help examples&lt;/code&gt; displays several examples ;)
Like how to install a specific version of a gem:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem install rake --version 0.3.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;#39;t know why but I never remember this syntax
Now I would not need to ask to a search engine.
I content myself with &lt;code&gt;geme help examples&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;gem server&lt;/h2&gt;

&lt;p&gt;Here is a little curiosity: &lt;code&gt;gem server&lt;/code&gt; provides an html page (see it at
&lt;code&gt;localhost:8808&lt;/code&gt;) with the list of all installed gems.
This seems a little gadget, especially that one can have such information quickly on the command line with &lt;code&gt;list&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem list

*** LOCAL GEMS ***

awesome_print (1.6.1)
bigdecimal (1.2.6)
bundler (1.7.9)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, with &lt;code&gt;gem help list&lt;/code&gt;, I found a way to get details about installed gems:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem list -d

*** LOCAL GEMS ***

awesome_print (1.6.1)
    Author: Michael Dvorkin
    Homepage: http://github.com/michaeldv/awesome_print
    License: MIT
    Installed at: /home/xavier/.rvm/gems/ruby-2.2.0

    Pretty print Ruby objects with proper indentation and colors

bigdecimal (1.2.6)
    Authors: Kenta Murata, Zachary Scott, Shigeo Kobayashi
    Homepage: http://www.ruby-lang.org
    Installed at (default): /home/xavier/.rvm/rubies/ruby-2.2.0/lib/ruby/gems/2.2.0

Arbitrary-precision decimal floating-point number library.

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Need more work…&lt;/h2&gt;

&lt;p&gt;I didn&amp;#39;t finish to read this documentation. It looks promising to me, and I
feel that I&amp;#39;m going to still learn many things.&lt;/p&gt;

&lt;p&gt;See you soon.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Learn Better - The Recall Technique</title>
   <link href="http://xavier.nayrac.eu/2015/08/02/how-to-learn-better/"/>
   <updated>2015-08-02T00:00:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/08/02/how-to-learn-better</id>
   <content type="html">&lt;p&gt;I recently attended the course 
&lt;a href=&quot;https://www.coursera.org/learn/learning-how-to-learn&quot;&gt;Learning how to learn&lt;/a&gt;
from
&lt;a href=&quot;https://www.coursera.org/ucsd&quot;&gt;San Diego university, Californie&lt;/a&gt;
on &lt;a href=&quot;https://www.coursera.org/courses&quot;&gt;Coursera&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was looking for some tips and tricks to learn better, ie faster and easier.
I learned a lot!&lt;/p&gt;

&lt;p&gt;Professors Barbara Oakley and Terrence Sejnowski do an excellent job.
I will share with you some things I learned in the course. And I&amp;#39;m going to
start today with the &lt;strong&gt;recall technique&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;What&lt;/h2&gt;

&lt;p&gt;The recall technique is to do a real effort, after a working block, to remember
the main points addressed during this working block.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s nothing more than that, really. But this simple trick is going to boost your
capacity to memorize, by anchoring more deeply all your fresh knowledge into
your memory.&lt;/p&gt;

&lt;p&gt;So, what is that thing I called a &lt;strong&gt;working block&lt;/strong&gt;? It could be anything:
a 20 minutes class, 30 minutes of reading, a lecture of 45 minutes, an hour
debug session, a 3 hours meeting, etc.&lt;/p&gt;

&lt;h2&gt;Why&lt;/h2&gt;

&lt;p&gt;If one does nothing to anchor in one&amp;#39;s brain the information learned during a
working block (especially if it was theory), these ones will quickly disappear.
This is a natural phenomenon: the information will be cleared if nothing is done
to retain them.&lt;/p&gt;

&lt;p&gt;There is another thing where the recall technique could be of some help: to avoid the illusions of competence (the false sensation to have learned something), focusing on what we have poorly learned.&lt;/p&gt;

&lt;h2&gt;How&lt;/h2&gt;

&lt;p&gt;The best implementation I have found is to take (no more than) a minute at the
end of a working block to write down the main points. It can be 2 or 3
sentences, a bullet list, a schema, or anything you could think of.&lt;/p&gt;

&lt;p&gt;Two remarks: (i) Taking notes during the working block doesn&amp;#39;t exempt you to implement the recall technique, (ii) Thinking about the few main points is not enough, you really have to write them down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With this very simple habit you really can learn faster and simpler.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;See you soon.&lt;/p&gt;
</content>
 </entry>
 

</feed>
