<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Xavier Nayrac</title>
 <link href="http://xavier.nayrac.eu/atom.xml" rel="self"/>
 <link href="http://xavier.nayrac.eu/"/>
 <updated>2015-10-28T19:07:44+01:00</updated>
 <id>http://xavier.nayrac.eu</id>
 <author>
   <name>Xavier Nayrac</name>
   <email></email>
 </author>

 
 <entry>
   <title>Make an electronic tea timer</title>
   <link href="http://xavier.nayrac.eu/2015/10/28/make-electronic-tea-timer/"/>
   <updated>2015-10-28T00:00:00+01:00</updated>
   <id>http://xavier.nayrac.eu/2015/10/28/make-electronic-tea-timer</id>
   <content type="html">&lt;p&gt;Here is a project I&amp;#39;m running for several weeks. The objective was to make my
first &lt;em&gt;real thing&lt;/em&gt;, with the help of an arduino. This thing is an &lt;em&gt;electronic
tea timer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/hourglass.jpg&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A what? Indeed it&amp;#39;s simply a timer. But I think that the term &lt;em&gt;electronic tea
timer&lt;/em&gt; is better, isn&amp;#39;t it ;) When I&amp;#39;m brewing some tea, 9 times out of 10 I
forget the time limit for the infusion and end up with an undrinkable beverage.
So I wanted a simple timer with two buttons, a buzzer and a LED.
A button starts a 3 minute countdown, for green tea, and the other one starts a 5
minute countdown for black tea. At the end the whole thing makes plenty of
beeps and blinks until I puts it off. Something really simple, isn&amp;#39;t it?
But I didn&amp;#39;t want to use a whole arduino in this project, while a 0.60€ tiny
micro controller might do the trick.&lt;/p&gt;

&lt;p&gt;So I would have to learn how to program the ATtiny micro controllers from Atmel.
Why those ones? Because they are close to the ATmega328, the one into the
arduino. And I already know some things about this chip.&lt;/p&gt;

&lt;p&gt;First, I created a prototype of that &lt;em&gt;sound hourglass&lt;/em&gt; with the arduino.
Just to be sure I knew how to do. The schematic could be something like that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/proto-tea-timer.png&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally I use only one LED, but in the prototype there was two. Using this
prototype I soon realized that a single LED was enough.&lt;/p&gt;

&lt;p&gt;Next step was to make the timer with an ATtiny45. Why this one precisely?
Because 1) I owned one and 2) there is a plethora of tutorials to program an
ATtiny45 using an arduino as a programmer. If you are not aware of the term,
&lt;strong&gt;to program&lt;/strong&gt; a micro controller is more or less to transfer its program into its
memory
from a computer. For both sides to communicate, one need an interface called a
&lt;strong&gt;programmer&lt;/strong&gt;. There is many ways to do this, I wanted to use an arduino as a
base programmer, to have nothing new to buy. You&amp;#39;ll find a good tutorial here:
&lt;a href=&quot;http://www.instructables.com/id/Program-an-ATtiny44458485-with-Arduino/&quot;&gt;Program an ATtiny44/45/84/85 with Arduino&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was relatively easy to make a programmer for the ATtiny45 using an arduino:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/hello-world-attiny45.png&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I was going to program a lot of micro controllers, I preferred make a shield.
First a temporary one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/arduino-temp-shield.jpg&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then a permanent:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/arduino-shield-attiny45.jpg&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was too eager to make the shield, so I reversed the direction of the DIP
socket. That is why the wires are so long: I didn&amp;#39;t want to desolder it. Anyway
it works fine ;)&lt;/p&gt;

&lt;p&gt;So I was able to program an ATtiny45 (4K of ROM) using an arduino &lt;strong&gt;AND&lt;/strong&gt; the
Arduino IDE. It was a good start, but it wasn&amp;#39;t enough. First I didn&amp;#39;t
want to use the Arduino IDE, for reproducibility and automation issues. And
then I was pretty sure that the code of my &lt;em&gt;tea timer&lt;/em&gt; could fit into an
ATtiny13, who have only 1K of ROM, and is almost two times cheaper than an
ATtiny45.&lt;/p&gt;

&lt;p&gt;To be continued…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Quine in R - The Return</title>
   <link href="http://xavier.nayrac.eu/2015/10/13/a-quine-n-r-the-return/"/>
   <updated>2015-10-13T00:00:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/10/13/a-quine-n-r-the-return</id>
   <content type="html">&lt;p&gt;In the previous post &lt;a href=&quot;http://xavier.nayrac.eu/2015/10/10/a-quine-in-r/&quot;&gt;A Quine In R&lt;/a&gt;
I presented a &lt;a href=&quot;https://en.wikipedia.org/wiki/Quine_%28computing%29&quot;&gt;quine&lt;/a&gt;
in the R programming language. The code was a little bit long for the task, 19 lines, mainly
compared to the Ruby code from the original post:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;puts &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;src = &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; + src.inspect + src&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;src = &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Ruby, the code is short thanks to the method &lt;code&gt;inspect&lt;/code&gt;, who automatically
escape the non printable characters and the quotes:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;puts &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;quot;\nputs \&amp;quot;src\&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;quot;\&amp;quot;\\nputs \\\&amp;quot;src\\\&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Naturally I searched for a similar function in R, at least for the strings.
I gave up after fifteen minutes of unsuccessful search, and I wrote
&lt;a href=&quot;http://xavier.nayrac.eu/2015/10/10/a-quine-in-r/&quot;&gt;the 19 lines of code&lt;/a&gt;
from the previous post.&lt;/p&gt;

&lt;p&gt;At this moment, Hadley Wickham kindly suggested to use the function
&lt;code&gt;encodeString&lt;/code&gt;. That&amp;#39;s what I had been looking for, without finding it.
With the help of this function, a quine in R is really shorter. Not as
short as the Ruby version, but, anyway, it&amp;#39;s shorter:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;src &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\nwriteLines(c(paste(\&amp;quot;src &amp;lt;-\&amp;quot;, encodeString(src, quote=&amp;#39;\&amp;quot;&amp;#39;)), src))&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;writeLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;paste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;src &amp;lt;-&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;encodeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;src&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; quote&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; src&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like this version, so I add it on &lt;a href=&quot;http://rosettacode.org/wiki/Quine#R&quot;&gt;rosettacode.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like I said previously, it&amp;#39;s good to use &lt;code&gt;diff&lt;/code&gt; to assure yourself that you
really wrote a quine ;)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;diff -u quine2.r &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Rscript quine2.r&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the result is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ Rscript quine3.r
src &amp;lt;- &amp;quot;\nwriteLines(c(paste(\&amp;quot;src &amp;lt;-\&amp;quot;, encodeString(src, quote=&amp;#39;\&amp;quot;&amp;#39;)), src))&amp;quot;

writeLines(c(paste(&amp;quot;src &amp;lt;-&amp;quot;, encodeString(src, quote=&amp;#39;&amp;quot;&amp;#39;)), src))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>A Quine in R</title>
   <link href="http://xavier.nayrac.eu/2015/10/10/a-quine-in-r/"/>
   <updated>2015-10-10T00:00:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/10/10/a-quine-in-r</id>
   <content type="html">&lt;p&gt;I just read the article
&lt;a href=&quot;http://blog.chaps.io/2015/10/01/generating-quines-in-ruby.html&quot;&gt;generating Quines in Ruby&lt;/a&gt;
and I really enjoyed it. I wanted to do a quine myself in R.&lt;/p&gt;

&lt;p&gt;So, what&amp;#39;s a quine? A quine is a self reproducing software. It must meet
two conditions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It produces its source code as its unique output.&lt;/li&gt;
&lt;li&gt;It doesn&amp;#39;t take any input (thus excluding the ability to read from a file).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is my solution in R. It displays its source code on standard output when
executed. It is mostly inspired by the C code from the original article:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;src &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\nescape &amp;lt;- function(x) {\n    cat(&amp;#39;\&amp;quot;&amp;#39;)\n    for(e in strsplit(x, &amp;#39;&amp;#39;)[[1]]) {\n        if(e == &amp;#39;\\n&amp;#39;) {\n            cat(&amp;#39;\\\\n&amp;#39;)\n        } else if(e == &amp;#39;\\\\&amp;#39;) {\n            cat(&amp;#39;\\\\\\\\&amp;#39;)\n        } else if(e == &amp;#39;\&amp;quot;&amp;#39;) {\n            cat(&amp;#39;\\\\\&amp;quot;&amp;#39;)\n        } else {\n            cat(e)\n        }\n    }\n    cat(&amp;#39;\&amp;quot;&amp;#39;)\n}\ncat(\&amp;quot;src &amp;lt;-\&amp;quot;)\nescape(src)\nwriteLines(src)&amp;quot;&lt;/span&gt;
escape &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;strsplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kp&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kp&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;\\\\&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kp&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;\\&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kp&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;src &amp;lt;-&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
escape&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;src&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;writeLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;src&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As noted in the original article, it&amp;#39;s a good practice to test one&amp;#39;s own
solution with &lt;code&gt;diff&lt;/code&gt;. If the output of your quine and its source are identical,
&lt;code&gt;diff&lt;/code&gt; will not produce any output, else, happy debugging ;)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff -u quine.r &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Rscript quine.r&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My solution is much longer than the one on
&lt;a href=&quot;http://rosettacode.org/wiki/Quine#R&quot;&gt;rosetta code&lt;/a&gt;
for example. But who care&amp;#39;s? It was funny to do and it was a good little puzzle
to solve. And I even learn a new function of R (&lt;code&gt;writeLines&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;So it&amp;#39;s up to you now. Let me know if you write a quine, whatever the language ;)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How many times a day do I sit down at my desk</title>
   <link href="http://xavier.nayrac.eu/2015/10/06/how-many-times-a-day-do-i-sit-down-at-my-desk/"/>
   <updated>2015-10-06T00:00:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/10/06/how-many-times-a-day-do-i-sit-down-at-my-desk</id>
   <content type="html">&lt;p&gt;Since September 21, I record every day when I&amp;#39;m (and when I&amp;#39;m not) seated at
my desk. I&amp;#39;m going to conduct this, somewhat weird, experiment during seven or
eight weeks. I would like to known how many times a day do I sit down at my
desk, and also to see if there is some recurring patterns.
I record those data with an arduino linked to a
&lt;a href=&quot;http://www.interlinkelectronics.com/FSR406.php&quot;&gt;Force Sensing Resistor&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/lkdjiin/sit-down&quot;&gt;code for the arduino&lt;/a&gt;
(along with some photos) is available on Github.&lt;/p&gt;

&lt;p&gt;This blog post is a debriefing of the first week of data recording.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/raw.jpg&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The pressure is recorded with a scale varying from 0 to 1023.
Zero being the absence of pressure and 1023 being the maximum pressure that the
device can measure up. I take a measure every 30 seconds.&lt;/p&gt;

&lt;p&gt;On the preceding plot, we can see the raw data for the week. They represent the
whole scale of values. Depending how I&amp;#39;m sitting the device record different
values. The blue points at bottom clearly indicate when I am not seated.
After a few trials and errors, I found that 20 is a good threshold to separate
raw data in two categories: &lt;em&gt;seated&lt;/em&gt; and &lt;em&gt;not seated&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here is the result for the first week:&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;Day&lt;/th&gt;
  &lt;th&gt;Times seated&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-21&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-22&lt;/td&gt;&lt;td&gt;30&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-23&lt;/td&gt;&lt;td&gt;33&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-24&lt;/td&gt;&lt;td&gt;33&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-25&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-26&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2015-09-27&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;One can visualize the processed data in an interesting way, for example the
Monday ; maroon areas represent when I am seated at my desk (the duration):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/visualize-day.png&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One can leverage this type of visualization to look at the whole week.
It could be a mean to identify patterns. But this week was special for me
(&lt;em&gt;I worked also during the weekend, I normally never do this&lt;/em&gt;) so I&amp;#39;m going to
wait for more data before to conclude anything.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/visualize-week.png&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I will surely write a following, more technical, post to show the R code to
process the data and for the plots.&lt;/p&gt;

&lt;p&gt;If you have a similar project (in your head or in the real world) I would
like to hear about it, so leave your comment.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to implement a well known algorithm</title>
   <link href="http://xavier.nayrac.eu/2015/09/11/how-to-implement-a-well-known-algorithm/"/>
   <updated>2015-09-11T14:49:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/09/11/how-to-implement-a-well-known-algorithm</id>
   <content type="html">&lt;p&gt;When you are implementing a «well known» algorithm you really should strictly
follow the algorithm&amp;#39;s steps as they are.&lt;/p&gt;

&lt;p&gt;Do not start to modify this or that part.&lt;/p&gt;

&lt;p&gt;Or even worse, do not try to optimize anything.&lt;/p&gt;

&lt;p&gt;If it is called a «well known» algorithm, there must a good reason for that.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s surely that lots and lots of people have run into trouble on this algorithm.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s likely that an army of developers have worked on it.&lt;/p&gt;

&lt;p&gt;Sometimes since 40 years.&lt;/p&gt;

&lt;p&gt;A «well known» algorithm is good enough for you.&lt;/p&gt;

&lt;p&gt;Implement it as it is.&lt;/p&gt;

&lt;p&gt;Save your time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Find the Size of an Arduino Program</title>
   <link href="http://xavier.nayrac.eu/2015/08/20/find-the-size-of-an-arduino-program/"/>
   <updated>2015-08-20T00:00:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/08/20/find-the-size-of-an-arduino-program</id>
   <content type="html">&lt;p&gt;If I want to find the size and the memory need of an Arduino program, how do I
do that? And why would I know their size?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/640-arduino-avr.jpg&quot; class=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Where is the program hidden?&lt;/h2&gt;

&lt;p&gt;The program, in elf format, is located in a hidden folder. You may find that its
size is quite impressive. This is not its final size into the Arduino.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;s -lh .build/uno/firmware.elf 
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; xavier xavier 40K août  &lt;span class=&quot;m&quot;&gt;19&lt;/span&gt; 21:01 .build/uno/firmware.elf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;A hidden folder is a folder whose name starts with a dot. One say «hidden»
because on Linux and OS X they are invisible by default.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;How to find the memory needs of an Arduino program&lt;/h2&gt;

&lt;p&gt;We are going to use the program &lt;code&gt;avr-size&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;avr-size -dC .build/uno/firmware.elf 
AVR Memory Usage
----------------
Device: Unknown

Program:    &lt;span class=&quot;m&quot;&gt;2786&lt;/span&gt; bytes
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.text + .data + .bootloader&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Data:         &lt;span class=&quot;m&quot;&gt;34&lt;/span&gt; bytes
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.data + .bss + .noinit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I&amp;#39;m using 34 bytes of RAM, for a total of 2786 bytes into the
microcontroller.&lt;/p&gt;

&lt;p&gt;The switch &lt;code&gt;-d&lt;/code&gt; gives us the values in decimal. The switch &lt;code&gt;-C&lt;/code&gt; specify the
report&amp;#39;s format from &lt;code&gt;avr-size&lt;/code&gt;. See &lt;code&gt;avr-size --help&lt;/code&gt; for other formats.&lt;/p&gt;

&lt;h2&gt;Why&lt;/h2&gt;

&lt;p&gt;ATMEL microcontrollers have different size of memory (for the program and for
the RAM). For example the ATtiny13 has 1 Kb for the program and 64 bytes of
RAM, while the ATtiny85 has 8 Kb for the program and 512 bytes for the RAM.&lt;/p&gt;

&lt;p&gt;For those programs who are intended to leave the Arduino platform, to end in a
microcontroller, knowing the memory size helps to know if it&amp;#39;s interesting
to spend time and energy to optimise these programs.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Do You Know The Gem Gem?</title>
   <link href="http://xavier.nayrac.eu/2015/08/03/do-you-know-the-gem-gem/"/>
   <updated>2015-08-03T00:00:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/08/03/do-you-know-the-gem-gem</id>
   <content type="html">&lt;p&gt;&lt;code&gt;gem&lt;/code&gt; is a well known command amongst rubyists, for a good reason:
it is central to the use of Ruby.
As an example, if I want to benefit from 
&lt;a href=&quot;https://github.com/michaeldv/awesome_print&quot;&gt;awesome print&lt;/a&gt; in my irb session,
I will install it like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem install awesome_print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Likewise, did you ever see a Rails app without a Gemfile?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.0.0&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;4.0.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pg&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Actually if you have only 3 days of Ruby in your life, you can use &lt;code&gt;gem&lt;/code&gt; like
a boss. Do you? I don&amp;#39;t. Not yet.&lt;/p&gt;

&lt;p&gt;Indeed I use Ruby every single day since 5 or 6 years. And I had never written
&lt;code&gt;gem --help&lt;/code&gt;. Never. Not once.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem --help
RubyGems is a sophisticated package manager for Ruby.  This is a
...
  Further help:
    gem help commands            list all &amp;#39;gem&amp;#39; commands
    gem help examples            show some examples of usage
    gem help gem_dependencies    gem dependencies file guide
    gem help platforms           gem platforms guide
    gem help &amp;lt;COMMAND&amp;gt;           show help on COMMAND
    gem server                   present a web page at
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think there is a lot to read. So, here is a quick tour of the many possibilities of &lt;code&gt;gem&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;gem help commands&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start by looking at the different commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem help commands
GEM commands are:

    build                  Build a gem from a gemspec
    cert                   Manage RubyGems certificates and signing settings
...
    wrappers               Re run generation of environment wrappers for gems.
    yank                   Remove a pushed gem from the index
...
Commands may be abbreviated, so long as they are unambiguous.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have abbreviated the previous output, because there are &lt;strong&gt;33 commands&lt;/strong&gt;.
I really had no clue of such a big number of commands. Here is the list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;build&lt;/li&gt;
&lt;li&gt;cert&lt;/li&gt;
&lt;li&gt;check&lt;/li&gt;
&lt;li&gt;cleanup&lt;/li&gt;
&lt;li&gt;contents&lt;/li&gt;
&lt;li&gt;dependency&lt;/li&gt;
&lt;li&gt;environment&lt;/li&gt;
&lt;li&gt;fetch&lt;/li&gt;
&lt;li&gt;generate_index&lt;/li&gt;
&lt;li&gt;help&lt;/li&gt;
&lt;li&gt;install&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;lock&lt;/li&gt;
&lt;li&gt;mirror&lt;/li&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;outdated&lt;/li&gt;
&lt;li&gt;owner&lt;/li&gt;
&lt;li&gt;pristine&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;query&lt;/li&gt;
&lt;li&gt;rdoc&lt;/li&gt;
&lt;li&gt;regenerate_binstubs&lt;/li&gt;
&lt;li&gt;search&lt;/li&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;li&gt;sources&lt;/li&gt;
&lt;li&gt;specification&lt;/li&gt;
&lt;li&gt;stale&lt;/li&gt;
&lt;li&gt;uninstall&lt;/li&gt;
&lt;li&gt;unpack&lt;/li&gt;
&lt;li&gt;update&lt;/li&gt;
&lt;li&gt;which&lt;/li&gt;
&lt;li&gt;wrappers&lt;/li&gt;
&lt;li&gt;yank&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personnaly I already used &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;cleanup&lt;/code&gt;, &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;,
&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;uninstall&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and that&amp;#39;s it! 7 commands on 33.
I am off the mark.&lt;/p&gt;

&lt;p&gt;Looking closer to the output of &lt;code&gt;gem help commands&lt;/code&gt;, I realize that one can
abbreviate each command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem install my_gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;thus will be identical to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem i my_gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I really like this idea.&lt;/p&gt;

&lt;h2&gt;gem help a_command&lt;/h2&gt;

&lt;p&gt;One can get some help for a specific command.
For example, with &lt;code&gt;gem help install&lt;/code&gt; I learn that those options to not generate
the documentation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--no-rdoc
--no-ri
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;are deprecated! Now one can use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-N, --no-document
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;gem help examples&lt;/h2&gt;

&lt;p&gt;Obviously &lt;code&gt;gem help examples&lt;/code&gt; displays several examples ;)
Like how to install a specific version of a gem:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem install rake --version 0.3.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;#39;t know why but I never remember this syntax
Now I would not need to ask to a search engine.
I content myself with &lt;code&gt;geme help examples&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;gem server&lt;/h2&gt;

&lt;p&gt;Here is a little curiosity: &lt;code&gt;gem server&lt;/code&gt; provides an html page (see it at
&lt;code&gt;localhost:8808&lt;/code&gt;) with the list of all installed gems.
This seems a little gadget, especially that one can have such information quickly on the command line with &lt;code&gt;list&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem list

*** LOCAL GEMS ***

awesome_print (1.6.1)
bigdecimal (1.2.6)
bundler (1.7.9)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, with &lt;code&gt;gem help list&lt;/code&gt;, I found a way to get details about installed gems:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem list -d

*** LOCAL GEMS ***

awesome_print (1.6.1)
    Author: Michael Dvorkin
    Homepage: http://github.com/michaeldv/awesome_print
    License: MIT
    Installed at: /home/xavier/.rvm/gems/ruby-2.2.0

    Pretty print Ruby objects with proper indentation and colors

bigdecimal (1.2.6)
    Authors: Kenta Murata, Zachary Scott, Shigeo Kobayashi
    Homepage: http://www.ruby-lang.org
    Installed at (default): /home/xavier/.rvm/rubies/ruby-2.2.0/lib/ruby/gems/2.2.0

Arbitrary-precision decimal floating-point number library.

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Need more work…&lt;/h2&gt;

&lt;p&gt;I didn&amp;#39;t finish to read this documentation. It looks promising to me, and I
feel that I&amp;#39;m going to still learn many things.&lt;/p&gt;

&lt;p&gt;See you soon.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Learn Better - The Recall Technique</title>
   <link href="http://xavier.nayrac.eu/2015/08/02/how-to-learn-better/"/>
   <updated>2015-08-02T00:00:00+02:00</updated>
   <id>http://xavier.nayrac.eu/2015/08/02/how-to-learn-better</id>
   <content type="html">&lt;p&gt;I recently attended the course 
&lt;a href=&quot;https://www.coursera.org/learn/learning-how-to-learn&quot;&gt;Learning how to learn&lt;/a&gt;
from
&lt;a href=&quot;https://www.coursera.org/ucsd&quot;&gt;San Diego university, Californie&lt;/a&gt;
on &lt;a href=&quot;https://www.coursera.org/courses&quot;&gt;Coursera&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was looking for some tips and tricks to learn better, ie faster and easier.
I learned a lot!&lt;/p&gt;

&lt;p&gt;Professors Barbara Oakley and Terrence Sejnowski do an excellent job.
I will share with you some things I learned in the course. And I&amp;#39;m going to
start today with the &lt;strong&gt;recall technique&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;What&lt;/h2&gt;

&lt;p&gt;The recall technique is to do a real effort, after a working block, to remember
the main points addressed during this working block.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s nothing more than that, really. But this simple trick is going to boost your
capacity to memorize, by anchoring more deeply all your fresh knowledge into
your memory.&lt;/p&gt;

&lt;p&gt;So, what is that thing I called a &lt;strong&gt;working block&lt;/strong&gt;? It could be anything:
a 20 minutes class, 30 minutes of reading, a lecture of 45 minutes, an hour
debug session, a 3 hours meeting, etc.&lt;/p&gt;

&lt;h2&gt;Why&lt;/h2&gt;

&lt;p&gt;If one does nothing to anchor in one&amp;#39;s brain the information learned during a
working block (especially if it was theory), these ones will quickly disappear.
This is a natural phenomenon: the information will be cleared if nothing is done
to retain them.&lt;/p&gt;

&lt;p&gt;There is another thing where the recall technique could be of some help: to avoid the illusions of competence (the false sensation to have learned something), focusing on what we have poorly learned.&lt;/p&gt;

&lt;h2&gt;How&lt;/h2&gt;

&lt;p&gt;The best implementation I have found is to take (no more than) a minute at the
end of a working block to write down the main points. It can be 2 or 3
sentences, a bullet list, a schema, or anything you could think of.&lt;/p&gt;

&lt;p&gt;Two remarks: (i) Taking notes during the working block doesn&amp;#39;t exempt you to implement the recall technique, (ii) Thinking about the few main points is not enough, you really have to write them down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With this very simple habit you really can learn faster and simpler.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;See you soon.&lt;/p&gt;
</content>
 </entry>
 

</feed>
